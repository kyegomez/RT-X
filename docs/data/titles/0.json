{
    "/README.md": "RT-X: Efficient PyTorch Implementation for RTX Models",
    "/README.md:1-39": "RT-X: Pytorch Implementation for Open X-Embodiment Models",
    "/README.md:41-85": "Evaluating Model with Conditional Scale 3",
    "/README.md:85-96": "Running Tests on RT-X Modules",
    "/README.md:96-106": "EfficientNet Integration and RTX-1 Training",
    "/README.md:96-96": "Author List",
    "/efficient_net_example.py": "EfficientNet Processing Example",
    "/examples/rtx1_example.py": "RTX1 Model Video Processing and Evaluation",
    "/examples/rtx1_pretrained_example.py": "RTX1 Pretrained Model Example",
    "/examples/rtx2_example.py": "RTX2 Image-Text Processing Example",
    "/pyproject.toml": "Configuring RTX-Torch Poetry Package",
    "/pyproject.toml:1-36": "Poetry Config for rtx-torch Package",
    "/pyproject.toml:40-63": "Optimizing Python Linter and Formatter",
    "/requirements.txt": "Essential Python Packages for Deep Learning",
    "/rtx/__init__.py": "Importing and Defining RTX Classes",
    "/rtx/data_util.py": "Data Utilities Functionality",
    "/rtx/data_util.py:1-34": "Describe Data Structure",
    "/rtx/data_util.py:115-117": "Update Dictionary Values",
    "/rtx/data_util.py:35-69": "Preprocessing Function for Dictionary Data",
    "/rtx/data_util.py:70-114": "Resizing and Filtering Input Data",
    "/rtx/efficient_net.py": "EfficientNet Image Feature Extractor",
    "/rtx/efficient_net.py:1-37": "EfficientNetFilm Class for Image Features",
    "/rtx/efficient_net.py:38-70": "EfficientNet Image Feature Extraction",
    "/rtx/rtx1.py": "Real-time Video Classification Model",
    "/rtx/rtx1.py:1-47": "Sinusoidal Position Embeddings and Helper Functions",
    "/rtx/rtx1.py:1030-1054": "Compute Logits with Model Evaluation",
    "/rtx/rtx1.py:139-182": "Neural Network Forward Pass & MBConv Functions",
    "/rtx/rtx1.py:183-224": "Multi-Head Self Attention Implementation",
    "/rtx/rtx1.py:225-272": "Multi-Head Attention Layer Initialization",
    "/rtx/rtx1.py:274-318": "Attention-based FilmViT Image Classification",
    "/rtx/rtx1.py:319-350": "MaxVit Architecture Construction",
    "/rtx/rtx1.py:351-377": "MBConv ViT Image Classifier",
    "/rtx/rtx1.py:378-406": "Initializing MbConv and FilmMaxVit Attributes",
    "/rtx/rtx1.py:408-434": "Pretrain Initializing Model Parameters",
    "/rtx/rtx1.py:435-469": "EfficientNet Image Classifier Initialization",
    "/rtx/rtx1.py:470-493": "Neural Block Construction: Conv, Rearrange, Residual",
    "/rtx/rtx1.py:48-91": "Neural Network Layer Definitions and Position Embeddings",
    "/rtx/rtx1.py:494-521": "Grid Attention Transformer Block",
    "/rtx/rtx1.py:522-574": "Convolutional Transformer Attention Module",
    "/rtx/rtx1.py:575-616": "Multi-Head Attention Layer Initialization",
    "/rtx/rtx1.py:617-657": "Attention Transformer Class with Attentional Masks",
    "/rtx/rtx1.py:658-698": "RTX Layer and TokenLearner",
    "/rtx/rtx1.py:699-737": "RTX Network Initialization and Forward Function",
    "/rtx/rtx1.py:738-769": "RT1 Configuration Class",
    "/rtx/rtx1.py:770-804": "RT1: Initializing Vision-Language Model and Conditioner",
    "/rtx/rtx1.py:805-839": "Conditional Transformer Model Initialization",
    "/rtx/rtx1.py:840-874": "Video-Text Conditional Forward Pass for Vision Transformer",
    "/rtx/rtx1.py:876-913": "Vision-Language Model Token Learning",
    "/rtx/rtx1.py:914-955": "Real-Time Video Processing with ViT & RT1",
    "/rtx/rtx1.py:92-137": "Squeeze-Excitation and MBConv Residual Blocks",
    "/rtx/rtx1.py:956-993": "RTX1 Constructor for RT1 and ViT Models",
    "/rtx/rtx1.py:994-1028": "RTX1 Model Training and Inference",
    "/rtx/rtx2.py": "RTX2: Versatile Transformer for Image-Text Inputs",
    "/rtx/rtx2.py:1-30": "RTX2: Versatile Transformer Architecture",
    "/rtx/rtx2.py:102-115": "Decoder Class with Initializer and Forward Method",
    "/rtx/rtx2.py:31-67": "RTX2: Advanced Image-Text Processing Model",
    "/rtx/rtx2.py:68-101": "RTX2 Model Class with Configurable Decoder Architecture",
    "/run_example.py": "Run Example Code",
    "/tests.py": "EfficientNetFilm Model Testing and Exception Handling",
    "/tests.py:1-40": "EfficientNetFilm Test Fixture",
    "/tests.py:101-131": "Test EfficientNetFilm with Invalid Inputs",
    "/tests.py:132-168": "Testing EfficientNetFilm Model's Image Validation",
    "/tests.py:169-202": "Testing RTX1 Model Initialization, Training, and Evaluation",
    "/tests.py:204-231": "Invalid Input Testing in RTX1 Model",
    "/tests.py:232-264": "Testing RTX1 Conditional Scaling and Model Selection",
    "/tests.py:267-299": "Validating RTX1 Class with Test Cases",
    "/tests.py:300-333": "Exception Test Cases for RTX1",
    "/tests.py:334-370": "Negative Input Test Cases",
    "/tests.py:371-400": "RTX2 Model Integration Test Suite",
    "/tests.py:401-434": "RTX2 Configuration and Negative Size Test",
    "/tests.py:41-73": "EfficientNetFilm Test Suite",
    "/tests.py:435-470": "RTX2 Test Cases: Negative Size and Dimension Validation",
    "/tests.py:471-477": "Negative Heads Test for RTX2 Function",
    "/tests.py:75-100": "Testing EfficientNetFilm Functionalities",
    "/tests/test_data_utils.py": "Data Processing and Image Preprocessing Tests",
    "/tests/test_data_utils.py:1-59": "Testing Data Processing in RT-X Codebase",
    "/tests/test_data_utils.py:103-141": "Testing Data Utils: Format Imgs Functionality",
    "/tests/test_data_utils.py:142-142": "Dic Equality Assertion",
    "/tests/test_data_utils.py:60-100": "Testing `format_imgs` with Multiple Input Scenarios",
    "/tests/test_rtx1.py": "Testing RTX1 Model Layers and Logits",
    "/tests/test_rtx1.py:1-38": "Testing RTX1 Model Logits Shape",
    "/tests/test_rtx1.py:39-67": "Layer Equality Test for RTX1 Models",
    "/tests/test_rtx1.py:68-74": "Unit Test: Video Shape Assertion"
}