{"_default": {"1": {"path": "/README.md", "hash": "c89e081a2f2fe282131b2f001e8afdde", "title": "RT-X: Efficient PyTorch Implementation for RTX Models"}, "2": {"path": "/README.md:1-39", "hash": "b39ecc3761dc908edaff056ce4abf83b", "title": "RT-X: Pytorch Implementation for Open X-Embodiment Models"}, "3": {"path": "/README.md:41-85", "hash": "ecfb8dbebdfa75aff75b5560e7ccf869", "title": "Evaluating Model with Conditional Scale 3"}, "4": {"path": "/README.md:85-96", "hash": "c7800627a92b6c1e9c513740151120db", "title": "Running Tests on RT-X Modules"}, "5": {"path": "/README.md:96-96", "hash": "4d81227716e02feb34a8af3f0c739bfb", "title": "Author List"}, "6": {"path": "/README.md:96-106", "hash": "9e1dd15f00b0e081dd30d8328d9a8a1d", "title": "EfficientNet Integration and RTX-1 Training"}, "7": {"path": "/efficient_net_example.py", "hash": "68c24684c08340f4a3f81a943d008b86", "title": "EfficientNet Processing Example"}, "8": {"path": "/examples/rtx1_example.py", "hash": "b2f3ec7ad57331a7e310c01416444f80", "title": "RTX1 Model Video Processing and Evaluation"}, "9": {"path": "/examples/rtx1_pretrained_example.py", "hash": "ce4a7f992d914b41cb64c166f4aef037", "title": "RTX1 Pretrained Model Example"}, "10": {"path": "/examples/rtx2_example.py", "hash": "68139b667c9c05e2ff83d9b78cbf88be", "title": "RTX2 Image-Text Processing Example"}, "11": {"path": "/pyproject.toml", "hash": "7ee29fa782ecf2490e9d8c20b3f58748", "title": "Configuring RTX-Torch Poetry Package"}, "12": {"path": "/pyproject.toml:1-36", "hash": "6e5b4ab19f10312a5de15c7a4e9668b0", "title": "Poetry Config for rtx-torch Package"}, "13": {"path": "/pyproject.toml:40-63", "hash": "25f11bbd122602f8a94325b2d5ba3c09", "title": "Optimizing Python Linter and Formatter"}, "14": {"path": "/requirements.txt", "hash": "0fb5d5c53b4c39a29309373e697e3c52", "title": "Essential Python Packages for Deep Learning"}, "15": {"path": "/rtx/__init__.py", "hash": "15d8fa64f2b86e3c1abb2bdb39ba96d9", "title": "Importing and Defining RTX Classes"}, "16": {"path": "/rtx/data_util.py", "hash": "3fef382ee7e03f6003ed6a0dff5e7927", "title": "Data Utilities Functionality"}, "17": {"path": "/rtx/data_util.py:1-34", "hash": "7d9ef5365653225af6eaa803827a64af", "title": "Describe Data Structure"}, "18": {"path": "/rtx/data_util.py:35-69", "hash": "bfd7d9cd4140520fe9e6417a25e4afde", "title": "Preprocessing Function for Dictionary Data"}, "19": {"path": "/rtx/data_util.py:70-114", "hash": "1a0399b0eb79c890afbd892a3674dfd7", "title": "Resizing and Filtering Input Data"}, "20": {"path": "/rtx/data_util.py:115-117", "hash": "4df8a71e04ee539ea8678fa37303f204", "title": "Update Dictionary Values"}, "21": {"path": "/rtx/efficient_net.py", "hash": "5fd9a2ec35fe4b334835f95b0c3045f7", "title": "EfficientNet Image Feature Extractor"}, "22": {"path": "/rtx/efficient_net.py:1-37", "hash": "ea3728583e82ba2cb0ee171dc7b4ac3b", "title": "EfficientNetFilm Class for Image Features"}, "23": {"path": "/rtx/efficient_net.py:38-70", "hash": "a3beea6e6118646cd4057aedb83f1538", "title": "EfficientNet Image Feature Extraction"}, "24": {"path": "/rtx/rtx1.py", "hash": "c57b6f80ee83b85d653be4fac7fa49ac", "title": "Real-time Video Classification Model"}, "25": {"path": "/rtx/rtx1.py:1-47", "hash": "6e6910e77767b9764961b5503472d161", "title": "Sinusoidal Position Embeddings and Helper Functions"}, "26": {"path": "/rtx/rtx1.py:48-91", "hash": "64c2e79f430e148863fb787b0083d081", "title": "Neural Network Layer Definitions and Position Embeddings"}, "27": {"path": "/rtx/rtx1.py:92-137", "hash": "8012891591587094e3eefbce228c15f4", "title": "Squeeze-Excitation and MBConv Residual Blocks"}, "28": {"path": "/rtx/rtx1.py:139-182", "hash": "ed009ae823db430a739188526ea1eab7", "title": "Neural Network Forward Pass & MBConv Functions"}, "29": {"path": "/rtx/rtx1.py:183-224", "hash": "4293374722db87c6ccf991d3265f6368", "title": "Multi-Head Self Attention Implementation"}, "30": {"path": "/rtx/rtx1.py:225-272", "hash": "2f56c7346023feca08f0ff6a642554fc", "title": "Multi-Head Attention Layer Initialization"}, "31": {"path": "/rtx/rtx1.py:274-318", "hash": "ea2896297157c20eb9d1eaf95b8b14f1", "title": "Attention-based FilmViT Image Classification"}, "32": {"path": "/rtx/rtx1.py:319-350", "hash": "8c8e7f44e5a0e5e63e61d7256b8a9c18", "title": "MaxVit Architecture Construction"}, "33": {"path": "/rtx/rtx1.py:351-377", "hash": "f758b426fe1266e807b3140f51d15890", "title": "MBConv ViT Image Classifier"}, "34": {"path": "/rtx/rtx1.py:378-406", "hash": "a8008985b58e20bd6c43d1777b83d74b", "title": "Initializing MbConv and FilmMaxVit Attributes"}, "35": {"path": "/rtx/rtx1.py:408-434", "hash": "9108af3743bb8d765040899fd03b0428", "title": "Pretrain Initializing Model Parameters"}, "36": {"path": "/rtx/rtx1.py:435-469", "hash": "b2df728fa40e4e35e3f0eb8f240db9b3", "title": "EfficientNet Image Classifier Initialization"}, "37": {"path": "/rtx/rtx1.py:470-493", "hash": "e1ff9f376d460972a765315dddc17e61", "title": "Neural Block Construction: Conv, Rearrange, Residual"}, "38": {"path": "/rtx/rtx1.py:494-521", "hash": "286ba832f1bf17f37f2ac6a942e96e08", "title": "Grid Attention Transformer Block"}, "39": {"path": "/rtx/rtx1.py:522-574", "hash": "a98a10559f5b5c3643e85d84bc73a6b0", "title": "Convolutional Transformer Attention Module"}, "40": {"path": "/rtx/rtx1.py:575-616", "hash": "a5654e73b8467fc515b28cb027bc1fa5", "title": "Multi-Head Attention Layer Initialization"}, "41": {"path": "/rtx/rtx1.py:617-657", "hash": "98eeac4a33f35c95d67ceb6ebca35247", "title": "Attention Transformer Class with Attentional Masks"}, "42": {"path": "/rtx/rtx1.py:658-698", "hash": "dff3731d072961dc6f375fd09a6b5488", "title": "RTX Layer and TokenLearner"}, "43": {"path": "/rtx/rtx1.py:699-737", "hash": "67138f6140c25d3dbb5c9fcb523bdecd", "title": "RTX Network Initialization and Forward Function"}, "44": {"path": "/rtx/rtx1.py:738-769", "hash": "841fb3826f09e3dcc8531db59431c746", "title": "RT1 Configuration Class"}, "45": {"path": "/rtx/rtx1.py:770-804", "hash": "459957650bb4c6931e0a7a8694d3948a", "title": "RT1: Initializing Vision-Language Model and Conditioner"}, "46": {"path": "/rtx/rtx1.py:805-839", "hash": "3e7631ecad714ba25a2cd137b37066b6", "title": "Conditional Transformer Model Initialization"}, "47": {"path": "/rtx/rtx1.py:840-874", "hash": "b9992e8c3cc3212bce7da43171d5d1e9", "title": "Video-Text Conditional Forward Pass for Vision Transformer"}, "48": {"path": "/rtx/rtx1.py:876-913", "hash": "c79025ef3f531acca4b657d33f1959d8", "title": "Vision-Language Model Token Learning"}, "49": {"path": "/rtx/rtx1.py:914-955", "hash": "a6900f9038dffb6223a633233d8377a0", "title": "Real-Time Video Processing with ViT & RT1"}, "50": {"path": "/rtx/rtx1.py:956-993", "hash": "722e397dde162010051812337ee1fcb8", "title": "RTX1 Constructor for RT1 and ViT Models"}, "51": {"path": "/rtx/rtx1.py:994-1028", "hash": "b51947eda39d43e64b251e088f7ddd2d", "title": "RTX1 Model Training and Inference"}, "52": {"path": "/rtx/rtx1.py:1030-1054", "hash": "c99a649c19474515d5a241dfa376afb6", "title": "Compute Logits with Model Evaluation"}, "53": {"path": "/rtx/rtx2.py", "hash": "d2f526e8fc8afadbe31debb3742f453f", "title": "RTX2: Versatile Transformer for Image-Text Inputs"}, "54": {"path": "/rtx/rtx2.py:1-30", "hash": "b8cd55b18f2c89704da6852e4bd6c610", "title": "RTX2: Versatile Transformer Architecture"}, "55": {"path": "/rtx/rtx2.py:31-67", "hash": "88a933eedd7a372101c459b3953bbedc", "title": "RTX2: Advanced Image-Text Processing Model"}, "56": {"path": "/rtx/rtx2.py:68-101", "hash": "00983e7caaf1da621c6a8f1564e6f5d1", "title": "RTX2 Model Class with Configurable Decoder Architecture"}, "57": {"path": "/rtx/rtx2.py:102-115", "hash": "def12eba14435e09e74f342720bc8408", "title": "Decoder Class with Initializer and Forward Method"}, "58": {"path": "/run_example.py", "hash": "ff632be50c9e8729365080cf978027d8", "title": "Run Example Code"}, "59": {"path": "/tests.py", "hash": "bfe677e2b1d15d56119377d9f55cd649", "title": "EfficientNetFilm Model Testing and Exception Handling"}, "60": {"path": "/tests.py:1-40", "hash": "215b1e430ed326d18b36844ccdb6b603", "title": "EfficientNetFilm Test Fixture"}, "61": {"path": "/tests.py:41-73", "hash": "5255224a9d78a65d0ffc3973906a4314", "title": "EfficientNetFilm Test Suite"}, "62": {"path": "/tests.py:75-100", "hash": "b9af021c6c03df81dea2305579fb2bf5", "title": "Testing EfficientNetFilm Functionalities"}, "63": {"path": "/tests.py:101-131", "hash": "2f71b70dbb9a5c3160895ebafb2fe312", "title": "Test EfficientNetFilm with Invalid Inputs"}, "64": {"path": "/tests.py:132-168", "hash": "1d6e2ae0ff9bbc8d2a3d13f63c204662", "title": "Testing EfficientNetFilm Model's Image Validation"}, "65": {"path": "/tests.py:169-202", "hash": "2e99ac1296b3e86f0a8bf113fa011453", "title": "Testing RTX1 Model Initialization, Training, and Evaluation"}, "66": {"path": "/tests.py:204-231", "hash": "4e1d17f249a22a480f8d03873de2038d", "title": "Invalid Input Testing in RTX1 Model"}, "67": {"path": "/tests.py:232-264", "hash": "667f0fe0a1024293721edc0da13f678c", "title": "Testing RTX1 Conditional Scaling and Model Selection"}, "68": {"path": "/tests.py:267-299", "hash": "396db3cc0bca48ef8522ada84e78b8c3", "title": "Validating RTX1 Class with Test Cases"}, "69": {"path": "/tests.py:300-333", "hash": "629a4cb0d943a1b444f16649ab16f2b6", "title": "Exception Test Cases for RTX1"}, "70": {"path": "/tests.py:334-370", "hash": "3d8fcd4f60b3f0ef7c1b811796c92e08", "title": "Negative Input Test Cases"}, "71": {"path": "/tests.py:371-400", "hash": "302d3aad90a45a60633708c6f1579895", "title": "RTX2 Model Integration Test Suite"}, "72": {"path": "/tests.py:401-434", "hash": "1ecd5247250ef38dfd7cc97409d8548a", "title": "RTX2 Configuration and Negative Size Test"}, "73": {"path": "/tests.py:435-470", "hash": "c83807f1b10c56671d56bd8b8f0380ff", "title": "RTX2 Test Cases: Negative Size and Dimension Validation"}, "74": {"path": "/tests.py:471-477", "hash": "fe0516625601d411d9666a12a9c754ac", "title": "Negative Heads Test for RTX2 Function"}, "75": {"path": "/tests/test_data_utils.py", "hash": "52b2cf1a200959698412efd50d1909de", "title": "Data Processing and Image Preprocessing Tests"}, "76": {"path": "/tests/test_data_utils.py:1-59", "hash": "347473aabb9818f506edb34c931afb39", "title": "Testing Data Processing in RT-X Codebase"}, "77": {"path": "/tests/test_data_utils.py:60-100", "hash": "4499eb10088b13d18ebff1d81a082a6d", "title": "Testing `format_imgs` with Multiple Input Scenarios"}, "78": {"path": "/tests/test_data_utils.py:103-141", "hash": "0ba352048c4319041053a8bfc0a047aa", "title": "Testing Data Utils: Format Imgs Functionality"}, "79": {"path": "/tests/test_data_utils.py:142-142", "hash": "61f59336980482accf0485ebafb84856", "title": "Dic Equality Assertion"}, "80": {"path": "/tests/test_rtx1.py", "hash": "79a292eead03a75f67e93677e6c32a4c", "title": "Testing RTX1 Model Layers and Logits"}, "81": {"path": "/tests/test_rtx1.py:1-38", "hash": "8a45443b4fcd9a145b154f0eaa497b3a", "title": "Testing RTX1 Model Logits Shape"}, "82": {"path": "/tests/test_rtx1.py:39-67", "hash": "cb15119690657adc8feeaa76422dcbdd", "title": "Layer Equality Test for RTX1 Models"}, "83": {"path": "/tests/test_rtx1.py:68-74", "hash": "2d483d9413b1dbabbc0645a91f565111", "title": "Unit Test: Video Shape Assertion"}}}