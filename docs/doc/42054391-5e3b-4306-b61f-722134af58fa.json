{
    "summary": "The code defines a class, `EfficientNetFilm`, which inherits from `nn.Module` and uses the EfficientNet model for feature extraction after applying image transformations using PIL and torchvision libraries. The `__call__` method takes an image path, applies transforms, extracts features, and prints shapes.",
    "details": [
        {
            "comment": "This code defines a class called `EfficientNetFilm` which is a subclass of `nn.Module`. It uses the EfficientNet model from the 'efficientnet_pytorch' library, applies image transformations using PIL and torchvision libraries, and outputs a specified number of features from the model.",
            "location": "\"/media/root/Prima/works/RT-X/docs/src/rtx/efficient_net.py\":0-36",
            "content": "from torch import nn\nfrom efficientnet_pytorch import EfficientNet\nfrom torchvision import transforms\nfrom PIL import Image\nclass EfficientNetFilm(nn.Module):\n    \"\"\"\n    EfficientNet with FiLM layer\n    Args:\n        model (str): EfficientNet model name\n        num_classes (int): Number of classes\n        num_features (int): Number of features to output from the model\n        resize (int): Size to resize the image to\n    Attributes:\n        model (EfficientNet): EfficientNet model\n        num_classes (int): Number of classes\n        num_features (int): Number of features to output from the model\n        resize (int): Size to resize the image to\n        transform (torchvision.transforms.Compose): Image transformations\n    Example:\n        >>> model = EfficientNetFilm('efficientnet-b0', 10)\n        >>> img = Image.open('img.jpeg')\n        >>> features = model(img)\n        >>> features.shape\n        torch.Size([1, 1280])\n    \"\"\"\n    def __init__(\n        self,\n        model,\n        num_classes,\n        num_features=1280,"
        },
        {
            "comment": "This code defines a class that initializes an EfficientNet model and applies image transformations for feature extraction. The `__call__` method takes an image path, applies transforms, extracts features from the model, and prints the shapes of the images and features.",
            "location": "\"/media/root/Prima/works/RT-X/docs/src/rtx/efficient_net.py\":37-69",
            "content": "        resize=224,\n    ):\n        super().__init__()\n        self.model = model\n        self.num_classes = num_classes\n        self.num_features = num_features\n        self.resize = resize\n        self.model = EfficientNet.from_pretrained(model)\n        self.transform = transforms.Compose(\n            [\n                transforms.Resize(resize),\n                transforms.ToTensor(),\n                transforms.Normalize(\n                    [0.485, 0.456, 0.406], [0.229, 0.224, 0.225]\n                ),\n            ]\n        )\n    def __call__(self, img: str):\n        \"\"\"\n        Extract the feature embeddings from the image\n        Args:\n            img (str): Path to image\n        \"\"\"\n        img = Image.open(img)\n        img = self.transform(img).unsqueeze(0)\n        print(img.shape)\n        features = self.model.extract_features(img)\n        print(features.shape)"
        }
    ]
}