{
    "summary": "The \"describe\" function recursively checks a dictionary's structure, identifying its type and size. The \"preprocess\" function resizes images or removes None values from the input dictionary, with a nested \"format_imgs\" function for image resizing as numpy arrays.",
    "details": [
        {
            "comment": "The function \"describe\" takes a dictionary as input and prints its structure. It recursively checks if the input is a dictionary, and if it's a list, it identifies its type and size. If it contains a tensor, it also shows the tensor's size and data type. If it's an image in bytes format, it opens and describes the image.",
            "location": "\"/media/root/Prima/works/RT-X/docs/src/rtx/data_util.py\":0-33",
            "content": "import io\nimport torch\nimport numpy as np\nfrom PIL import Image\ndef describe(dic, prefix=\"\"):\n    \"\"\"Useful to print out the structure of TF Record. ds.info can also be used\n        but it does not show lengths of lists and dicts.\n    Args:\n        dic (dict): Input\n        prefix (str, optional): Prefix used for nested indentation. Defaults to \"\".\n    \"\"\"\n    if not isinstance(dic, dict):\n        return\n    def describe_img(img: bytes):\n        img = Image.open(io.BytesIO(img))\n        return f\"{img.__class__.__name__} sz: { img.size}\"\n    for k, v in dic.items():\n        if isinstance(v, list):\n            list_type = \"\"\n            if len(v) > 0:\n                v_description = \"\"\n                if isinstance(v[0], torch.Tensor):\n                    v_description = (\n                        f\"({tuple(v[0].size())}, {v[0].dtype})\"\n                    )\n                elif isinstance(v[0], bytes):\n                    v_description = describe_img(v[0])\n                list_type = (\n                    f\"({v[0].__class__.__name__ }{v_description})\""
        },
        {
            "comment": "The code is part of a function named \"preprocess\" that takes a dictionary as input and performs various operations to remove nonetypes, convert images to numpy arrays, and returns the modified dictionary. It prints information about each key-value pair in the dictionary along with their types and sizes. The print statements are formatted using f-strings for readability. If a value is a dict, the function recursively calls itself on that value with an updated prefix. If the value is a tensor (torch.Tensor), it includes information about its shape and data type in the print statement. If the value is a string or bytes, it prints additional details accordingly.",
            "location": "\"/media/root/Prima/works/RT-X/docs/src/rtx/data_util.py\":34-68",
            "content": "                )\n            print(\n                f\"{prefix} {k}, {v.__class__.__name__}{list_type} sz:\"\n                f\" {len(v)}\"\n            )\n            if len(v) > 0:\n                describe(v[0], prefix + \"  \")\n        elif isinstance(v, dict):\n            print(\n                f\"{prefix} {k}, {v.__class__.__name__} sz:\"\n                f\" {len(v.items())}\"\n            )\n            describe(v, prefix + \"  \")\n        elif isinstance(v, bytes):\n            print(f\"{prefix} {k}, {describe_img( v)}\")\n        elif isinstance(v, str):\n            print(f\"{prefix} {k}, {v.__class__.__name__} v: {v}\")\n        else:\n            tensor_type = \"\"\n            if isinstance(v, torch.Tensor):\n                tensor_type = f\"({tuple(v[0].size())}, {v[0].dtype})\"\n            print(\n                f\"{prefix} {k}, {v.__class__.__name__} {tensor_type} \"\n            )\ndef preprocess(dic: any):\n    \"\"\"Remove nonetypes from a dict, convert images to numpy arrays and return.\n    Args:\n        dic (dict): Input.\n    Returns:"
        },
        {
            "comment": "The code defines a function `preprocess` that takes in an input (dictionary) and processes it by either resizing images or removing None values. If the input is not a dictionary, it returns the input as it is. The function also includes a nested `format_imgs` function which resizes images to the specified size as a numpy array.",
            "location": "\"/media/root/Prima/works/RT-X/docs/src/rtx/data_util.py\":69-113",
            "content": "        dict: Output.\n    \"\"\"\n    if isinstance(dic, bytes):\n        img = Image.open(io.BytesIO(dic))\n        return np.array(img.resize((224, 224)))\n    if not isinstance(dic, dict):\n        return dic\n    to_remove = []\n    for k, v in dic.items():\n        if isinstance(v, list):\n            processed = []\n            for vv in v:\n                processed.append(preprocess(vv))\n            dic[k] = processed\n        elif v is None:\n            to_remove.append(k)\n        else:\n            dic[k] = preprocess(v)\n    for k in to_remove:\n        del dic[k]\n    return dic\ndef format_imgs(dic: any, sz: int):\n    \"\"\"Resizes images to sz as a numpy array.\n    Args:\n        dic (dict): Input.\n    Returns:\n        dict: Output.\n    \"\"\"\n    if isinstance(dic, bytes):\n        img = Image.open(io.BytesIO(dic))\n        return np.array(img.resize((sz, sz)))\n    if not isinstance(dic, dict):\n        return dic\n    for k, v in dic.items():\n        if isinstance(v, list):\n            for i in range(len(v)):\n                v[i] = format_imgs(v, sz)"
        },
        {
            "comment": "This code snippet is part of a function that takes in a dictionary as input. If the key already exists in the dictionary, it continues to the next iteration. Otherwise, it calls the \"format_imgs\" function with the value and size parameters, and assigns the returned value back to the same key in the dictionary. Finally, it returns the modified dictionary.",
            "location": "\"/media/root/Prima/works/RT-X/docs/src/rtx/data_util.py\":114-116",
            "content": "        else:\n            dic[k] = format_imgs(v, sz)\n    return dic"
        }
    ]
}